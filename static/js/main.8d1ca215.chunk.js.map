{"version":3,"sources":["components/ProfessionalPlayersList.js","components/ProfessionalPlayers.js","components/Players.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js","constants.js"],"names":["ProfessionalPlayersList","props","className","src","name","width","height","alt","username","ProfessionalPlayers","PlayersInfo","map","player","i","key","Players","Scroll","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fet","fetch","then","response","json","users","player1","lookFor","event","console","log","target","value","filter","pla","toLowerCase","includes","type","placeholder","onChange","Boolean","window","location","hostname","match","initialState","searchField","store","createStore","action","Object","assign","payload","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAYeA,EAViB,SAACC,GAChC,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA2BF,EAAMG,KAAjC,cAAmDC,MAAM,QAAQC,OAAO,QAAQC,IAAI,OAC5F,qCAAWN,EAAMG,MACjB,yCAAeH,EAAMO,YCUTC,EAda,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,YAC7B,OACC,6BAEEA,EAAYC,KAAK,SAACC,EAAQC,GACzB,OACC,kBAAC,EAAD,CAAyBC,IAAKD,EAAGT,KAAMM,EAAYG,GAAGT,KAAMI,SAAUE,EAAYG,GAAGL,gBCE5EO,EARC,SAACd,GAChB,OACC,6BACC,kBAAC,EAAD,CAAqBS,YAAcT,EAAMS,gBCI7BM,G,MARA,SAACf,GACf,OACC,yBAAKgB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAoBb,OAAQ,UACpEL,EAAMmB,YCkBKC,E,kDApBd,WAAYpB,GAAO,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAGG,KAAKJ,MAAMC,SACN,+CAEDG,KAAKzB,MAAMmB,a,GAjBOQ,a,OC4DqCC,E,kDAxC9D,aAAc,IAAD,8BACX,gBAOFC,IAAM,WACJC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACf,OAAQuB,EAAOC,QAAS,EAAKd,MAAMV,aAXxD,EAcbyB,QAAU,SAACC,GACTC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKf,SAAS,CAACS,QAAS,EAAKd,MAAMV,OAAO+B,QACxC,SAAAC,GAAG,OAAIA,EAAIxC,KAAKyC,cAAcC,SAASR,EAAMG,OAAOC,MAAMG,qBAf5D,EAAKvB,MAAQ,CACXV,OAAQ,CAAC,GACTwB,QAAS,CAAC,IAJD,E,qDAqBJ,IACCA,EAAYV,KAAKJ,MAAjBc,QACR,OACE,yBAAKlC,UAAU,mCACb,wBAAIA,UAAU,MAAd,kBACA,2BAAO6C,KAAK,SAASC,YAAY,6BAA6BC,SAAWvB,KAAKW,UAC9E,kBAAC,EAAD,KACE,kBAAC,EAAD,KAEmB,IAAfD,EAAQ,IAAYV,KAAKI,MAE3B,kBAAC,EAAD,CAASpB,YAAc0B,W,GAjCjBR,aCTEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACnBC,YAAa,ICMTC,EAAQC,aDHe,WAAoC,IAAnCpC,EAAkC,uDAA5BiC,EAAcI,EAAc,uDAAP,GACvD,OAAOA,EAAOZ,MACZ,IER+B,sBFS7B,OAAOa,OAAOC,OAAO,GAAIvC,EAAO,CAAEkC,YAAaG,EAAOG,UACxD,QACE,OAAOxC,MCAbyC,IAASC,OACO,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OACWQ,SAASC,eAAe,SFmH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.8d1ca215.chunk.js","sourcesContent":["import React from 'react';\n\nconst ProfessionalPlayersList = (props) =>{\n\treturn(\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 fl\">\n\t\t\t<img src= {`https://robohash.org/${props.name}/?set=set5`} width=\"200px\" height=\"150px\" alt=\"im\"/>\n\t\t\t<h2>Name: {props.name}</h2>\n\t\t\t<h3>Username: {props.username}</h3>\n\t\t</div>\n\t)\n}\n\nexport default ProfessionalPlayersList;","import React from 'react';\nimport ProfessionalPlayersList from './ProfessionalPlayersList';\n\nconst ProfessionalPlayers = ({PlayersInfo}) =>{\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\tPlayersInfo.map(((player, i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<ProfessionalPlayersList key={i} name={PlayersInfo[i].name} username={PlayersInfo[i].username}/>\t\t\t\t\t\t\t\n\t\t\t\t\t)\n\t\t\t\t}))\n\t\t\t}\n\t\t</div>\t\t\n\t)\n}\n\nexport default ProfessionalPlayers;","import React from 'react';\nimport ProfessionalPlayers from './ProfessionalPlayers';\n\nconst Players = (props) => {\n\treturn(\n\t\t<div>\n\t\t\t<ProfessionalPlayers PlayersInfo={ props.PlayersInfo }/>\n\t\t</div>\n\t)\n}\n\nexport default Players;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn(\n\t\t<div style={{overflowY: \"scroll\", border: \"2px solid black\" , height: \"500px\"}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({ hasError: true })\n\t}\n\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>That's not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport Players from '../components/Players';\nimport \"tachyons\";\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { connect } from 'react-redux';\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    SearchField: state.searchPlayer.searchField\n  }\n}\n\n//const mapDispatchToProps = (dispatch) => {\n//  return {\n//    lookFor: (event) => dispatch(setSearchField(event.target.value))\n//  }  \n//} \n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      player: [0],\n      player1: [0]\n    }\n  }\n  \n  fet = () =>{\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response=> response.json())\n      .then(users => this.setState({player: users, player1: this.state.player}))  \n  }\n\n  lookFor = (event) =>{\n    console.log(event.target.value)\n    this.setState({player1: this.state.player.filter(\n      pla => pla.name.toLowerCase().includes(event.target.value.toLowerCase())\n    )})      \n  }\n\n  render(){\n    const { player1 } = this.state;\n    return(\n      <div className=\"tc dib br3 pa3 ma2 bw2 fl w-100\">\n        <h1 className=\"f1\">Tennis Players</h1>\n        <input type=\"search\" placeholder=\"Look for the tennis player\" onChange={ this.lookFor }/>\n        <Scroll>\n          <ErrorBoundry>\n            {\n              player1[0] === 0 && this.fet()\n            }\n            <Players PlayersInfo={ player1 }/>\n          </ErrorBoundry>\n        </Scroll>        \n      </div>\n    )   \n  }\n}\n\nexport default /*connect(mapStateToProps, mapDispatchToProps)*/(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants.js'\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchPlayers = (state=initialState, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, connect } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchPlayers } from './reducers';\n\nconst store = createStore(searchPlayers)\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';"],"sourceRoot":""}